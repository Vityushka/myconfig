substitutions:
  name: pzem004t
  platform: ESP8266
  board: d1_mini
  pin_tx: GPIO1
  pin_rx: GPIO3
  pin_sda: GPIO4
  pin_scl: GPIO5
# Wifi credentials
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ssid_h: !secret wifi_ssid_h
  wifi_password_h: !secret wifi_password_h
  ap_ssid: "PZEM-004T"
  ap_password: "1234567890"
# OTA and API
  ota_password: "esphome"
  api_password: "esphome"

esphome:
  name: $name
  platform: $platform
  board: $board

wifi:
  networks:
  - ssid: $wifi_ssid_h
    password: $wifi_password_h
    priority: 1
    hidden: true
  - ssid: $wifi_ssid
    password: $wifi_password
    priority: 2
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $ap_ssid
    password: $ap_password

captive_portal:

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  password: $api_password

ota:
  password: $ota_password

# web_server:
#   port: 80
  
uart:
  rx_pin: $pin_rx
  tx_pin: $pin_tx
  baud_rate: 9600
  # stop_bits: 2

i2c:
  sda: $pin_sda
  scl: $pin_scl
  scan: false

font:
  - file: "calibri.ttf"
    id: font12
    size: 12
  - file: "calibri.ttf"
    id: font16
    size: 16
  - file: "calibri.ttf"
    id: font20
    size: 20
  - file: "calibri.ttf"
    id: font24
    size: 24
  - file: "calibri.ttf"
    id: font31
    size: 31

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    brightness: 0.1
    id: my_display
    pages:
        lambda: |-
          // Vars
          int width = it.get_width();
          int height = it.get_height();
     
          // Signal level
          int rssi = -100;
          if (id(signal).has_state()) {
            rssi = id(signal).state;
          }
          int bars = 5;
          int bar_size = 3;
          int margin = 1;
          int x = width - (bar_size + margin) * bars - margin;
          int y = 0;
     
          int fill = 0;
          if (rssi > -55) {
            fill = 5;
          } else if (rssi > -65) {
            fill = 4;
          } else if (rssi > -70) {
            fill = 3;
          } else if (rssi > -78) {
            fill = 2;
          } else if (rssi > -82) {
            fill = 1;
          }
     
          for (int i = 0; i < bars; i++) {
            int itx = x + i * (bar_size + margin);
            int ity = y + (bars - i - 1) * bar_size;
            if (i < fill) {
              it.filled_rectangle(itx, ity, bar_size, bar_size + bar_size * i);
            } else {
              // it.rectangle(itx, ity, bar_size, bar_size + bar_size * i);
              it.line(itx, y + (bars * bar_size) - 1, itx + bar_size, y + (bars * bar_size) - 1);
            }
          }

          // Power
          if (id(power).has_state()) {
            it.printf(width / 2, height / 2 + 2, id(font31), TextAlign::CENTER, "%.3f kW", id(power).state);
          }

          // Name
          it.printf(0, 0, id(font16), TextAlign::TOP_LEFT, "PZEM-004T");
          
          // Voltage + frequency
          it.printf(0, height + 3, id(font16), TextAlign::BOTTOM_LEFT, "%.1fV", id(voltage).state);
          it.printf(width, height + 3, id(font16), TextAlign::BOTTOM_RIGHT, "%.1fhz", id(frequency).state);

globals:
  - id: total_monthly
    type: float
    restore_value: yes
    initial_value: '0'

time:
  - platform: sntp
    timezone: Europe/Kiev
    id: my_time
  # В конце каждого дня приплюсовать потребление за день к переменной ##
    on_time:
      - seconds: 0
        minutes: 55
        hours: 23
        then:
          - lambda: id(total_monthly) = id(total_monthly) + id(total_daily).state;
    # В начале каждого месяца обнулить переменную ##
      - seconds: 0
        minutes: 5
        hours: 0
        days_of_month: 1
        then:
          - lambda: id(total_monthly) = 0;

switch:
  - platform: restart
    name: ${name}_restart

sensor:
  - platform: pzemac
    current:
      name: "Home_Current"
      id: current
    voltage:
      name: "Home_Voltage"
      id: voltage
    power:
      name: "Home_Power"
      id: power
      filters:
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      unit_of_measurement: kW
      accuracy_decimals: 3
    frequency:
      name: "Home_Frequency"
      id: frequency
    # power_factor:
    #   name: "Home_Power_Factor"
    #   id: factor
    update_interval: 30s

  - platform: total_daily_energy
    id: total_daily
    name: "Home_Daily_Energy"
    power_id: power

# Общее потребление за месяц ##
  - platform: template
    name: "Home_Monthly_Energy"
    lambda: return id(total_monthly) + id(total_daily).state;
    update_interval: 10s
    unit_of_measurement: kWh

  - platform: uptime
    id: device_uptime

  - platform: wifi_signal
    name: ${name}_WiFi_Signal
    id: signal
    update_interval: 30s

text_sensor:
  - platform: version
    name: ${name}_firmware

  - platform: template
    name: ${name}_uptime_min
    lambda: |-
      uint32_t uptime = (id(device_uptime).state);
      int minutes = (uptime % 3600) / 60;
      int hours = (uptime % 86400) / 3600;
      int days = uptime / 86400;
      if (days > 0) {
        return { (String(days) + " д." + String(hours) + " ч." + String(minutes) + " мин.").c_str() };
      }
      if (hours > 0) {
        return { (String(hours) + " ч. " + String(minutes) + " мин.").c_str() };
      } else {
        return { (String(minutes) + " мин.").c_str() };
      }
    update_interval: 60s
    icon: mdi:clock-start
