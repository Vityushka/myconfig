  # - platform: imap_email_content
  #   server: imap.gmail.com
  #   name: DoorCam Motion Sensor
  #   port: 993
  #   username: !secret gmail_username
  #   password: !secret gmail_password
  #   folder: DoorCam
  #   senders:
  #     - !secret doorcam_email
  # - platform: imap
  #   server: imap.gmail.com
  #   name: DoorCam Email Unread
  #   port: 993
  #   username: !secret gmail_username
  #   password: !secret gmail_password
  #   folder: DoorCam
  #   search: FROM <doorcam.tsymbal@gmail.com>

  # - platform: yandex_transport
  #   name: Bus To Home
  #   stop_id: 9639688
  #   routes:
  #     - 22
  #     - 595

#  - platform: authenticated

  - platform: statistics
    name: out_temperature_stats
    entity_id: sensor.0x00158d0001e8995a_temperature
    sampling_size: 100000
    max_age:
      hours: 24
  
  - platform: template
    sensors:
      out_temperature_min_value:
        value_template: "{{ state_attr('sensor.out_temperature_stats', 'min_value') }}"
        unit_of_measurement: 'Â°C'


  - platform: min_max
    type: mean
    name: Humidity Average
    round_digits: 0
    entity_ids:
      - sensor.0x158d0001e586af_humidity
      - sensor.0x00158d0001e58714_humidity
      - sensor.0x00158d0001e6d85a_humidity
      - sensor.0x00158d000222c746_humidity
      - sensor.0x00158d000233fb72_humidity
      - sensor.0x00158d0002464ec0_humidity


  - platform: command_line
    name: Supervisor updates
    command: 'curl http://supervisor/supervisor/info -H "Authorization: Bearer $(printenv SUPERVISOR_TOKEN)" | jq ''{"newest_version":.data.version_latest,"current_version":.data.version,"addons":[.data.addons[] | select(.version != .installed)]}'''
    value_template: "{{ value_json.addons | length }}"
    json_attributes:
      - newest_version
      - current_version
      - addons


  # - platform: alpha_vantage
  #   api_key: !secret alpha_vantage_api_key
  #   symbols:
  #     - symbol: SLB
  #       name: Schlumberger

  - platform: rest
    resource: https://www.cbr-xml-daily.ru/daily_json.js
    name: USD_RUR
    value_template: '{{ value_json.Valute.USD.Value | float | round(2) }}'
    unit_of_measurement: 'RUR'
    scan_interval: 1200

  - platform: rest
    resource: https://www.cbr-xml-daily.ru/daily_json.js
    name: EUR_RUR
    value_template: '{{ value_json.Valute.EUR.Value | float | round(2) }}'
    unit_of_measurement: 'RUR'
    scan_interval: 1200

#  - platform: cups
#    printers:
#      - Officejet_Pro_8600_CB922C_

  - platform: template
    sensors:
      vova_gps_last_update:
        value_template: "{{as_timestamp(states.device_tracker.life360_vova_tsymbal.attributes.last_seen)|timestamp_local}}"
        friendly_name: Vova GPS Last Update
        icon_template: mdi:crosshairs-question
        attribute_templates:
          delta: "{{states('input_number.vova_gps_delta')}}"
      vova_gps_delta:
        value_template: "{{states('input_number.vova_gps_delta')}}"
        friendly_name: Vova GPS Delta
        icon_template: mdi:crosshairs-question
        unit_of_measurement: 'm'

      restarts_per_day:
        friendly_name: Qty Of Restart
        value_template: "{{states('counter.restart_counter')|int}}"
        unit_of_measurement: 'ea'
        

  - platform: command_line
    name: config_line_count_sh
    command: 'bash /config/line_count.sh'
    unit_of_measurement: 'lines'
    scan_interval: 1800

  - platform: command_line
    name: config_line_count_sh_code
    unit_of_measurement: 'lines'
    command: 'bash /config/line_count_code.sh'
    scan_interval: 1800

  - platform: template
    sensors:
      config_line_count_sh_ratio:
        friendly_name: Config Line Count Usage
        value_template: "{{ (states('sensor.config_line_count_sh_code')|int / states('sensor.config_line_count_sh')|int * 100) | round(0) }}"
        unit_of_measurement: '%'
        icon_template: mdi:brightness-percent

  # - platform: mqtt
  #   name: Config Line Count
  #   state_topic: "ubuntu/config_linecount"
  #   qos: 0
  #   expire_after: 150
  #   force_update: true
  #   value_template: "{{ value }}"
  #   unit_of_measurement: 'lines'
  #   icon: mdi:format-list-bulleted

  # - platform: mqtt
  #   name: Config Line Count Code
  #   state_topic: "ubuntu/config_linecount_code"
  #   qos: 0
  #   expire_after: 150
  #   force_update: true
  #   value_template: "{{ value }}"
  #   unit_of_measurement: 'lines'
  #   icon: mdi:format-list-numbered

#  - platform: command_line
#    name: ya_weather_city
#    command: 'bash /config/ya_weather.sh'
#    scan_interval: 120
    
#  - platform: command_line
#    name: ya_weather_work
#    command: 'bash /config/ya_weather_work.sh'
#    scan_interval: 120

#  - platform: command_line
#    name: ya_weather_home
#    command: 'bash /config/ya_weather_home.sh'
#    scan_interval: 120

  - platform: github
    access_token: !secret github_access_token
    repositories:
      - path: 'to4ko/myconfig'

  - platform: statistics
    entity_id: sensor.0x00158d000233fb72_pressure
    name: pressure
    max_age:
      minutes: 10
      
  - platform: template
    sensors:
      pressure_gradient:
        friendly_name: Pressure Gradient
        value_template: "{{(state_attr('binary_sensor.pressure_falling_fast','gradient')|float * 3600*100)|int(0)}}"
        icon_template: mdi:chart-line-variant
        unit_of_measurement: 'Pah'

      pressure_gradient_air_valve:
        friendly_name: Pressure Gradient (Air Valve)
        value_template: "{{(state_attr('binary_sensor.pressure_rising_fast_air_valve','gradient')|float * 3600*100)|int(0)}}"
        icon_template: mdi:chart-line-variant
        unit_of_measurement: 'Pah'
      
      pressure_indicator:
        friendly_name: Pressure Indicator
        value_template: >
          {% if is_state('binary_sensor.pressure_falling_fast','on')%} Falling Fast
          {% elif is_state('binary_sensor.pressure_falling_slow','on') and is_state('binary_sensor.pressure_falling_slow','off')%} Falling Slow
          {% elif is_state('binary_sensor.pressure_rising_fast','on')%} Raising Fast
          {% elif is_state('binary_sensor.pressure_rising_slow','on') and is_state('binary_sensor.pressure_rising_fast','off') %} Raising Slow
          {% else %} Stable
          {% endif %}
        icon_template: >
          {% if is_state('binary_sensor.pressure_falling_fast','on')%} mdi:chevron-triple-down
          {% elif is_state('binary_sensor.pressure_falling_slow','on') and is_state('binary_sensor.pressure_falling_slow','off') %} mdi:chevron-down
          {% elif is_state('binary_sensor.pressure_rising_fast','on')%} mdi:chevron-triple-up
          {% elif is_state('binary_sensor.pressure_rising_slow','on') and is_state('binary_sensor.pressure_rising_fast','off') %} mdi:chevron-up
          {% else %} mdi:checkbox-blank-circle-outline
          {% endif %}

#  - platform: season
#    type: astronomical

# ############################################################################
# External IP sensor
# ############################################################################
#  - platform: rest
#    resource: http://ip.jsontest.com
#    name: External IP
#    value_template: '{{ value_json.ip }}'

# ############################################################################
# Moon sensor
# ############################################################################
#  - platform: moon

# ############################################################################
# MIN\MAX sensor
# ############################################################################
#  - platform: min_max
#    name: temperature_min_max
#    entity_ids:
#      - sensor.temperature_158d0002464ec0
#      - sensor.temperature_158d0001e586af
#      - sensor.temperature_158d000222c746
#      - sensor.temperature_158d0001e6d85a
#      - sensor.temperature_158d0001e58714
#      - sensor.temperature_158d00020d7c3a
#      - sensor.temperature_158d0001e58754
  
#  - platform: min_max
#    name: humidity_min_max
#    entity_ids:
#      - sensor.humidity_158d0002464ec0
#      - sensor.humidity_158d0001e586af
#      - sensor.humidity_158d000222c746
#      - sensor.humidity_158d0001e6d85a
#      - sensor.humidity_158d0001e58714
#      - sensor.humidity_158d00020d7c3a
#      - sensor.humidity_158d0001e58754

# ############################################################################
# Unifi USG sensor
# ############################################################################
  # - platform: unifigateway
  #   name: UDMpro
  #   host: !secret udm_pro_host
  #   username: !secret udm_pro_username
  #   password: !secret udm_pro_password
  #   monitored_conditions:
  #     - www
  #     - wlan
  #     - alerts
  #     - firmware
  #     - vpn
  #     - lan
  #     - wan
      
# ############################################################################
# Template sensors
# ############################################################################
  - platform: template
    sensors:

      nonsmoker:
        value_template: "{{ states('sensor.date') and (( as_timestamp(now()) - as_timestamp(strptime('18.07.2018', '%d.%m.%Y')) ) / 86400 ) | round(2) }}"
        friendly_name: 'Not smoking'
        unit_of_measurement: 'Days'
        icon_template: mdi:smoking-off

      # door_count:
      #   entity_id: sensor.hor
      #   value_template: >-
      #     {{ states.binary_sensor | selectattr('state', 'eq', 'on') | selectattr('attributes.device_class', 'eq', 'door') | list | count }}
      # window_count:
      #   entity_id: sensor.time
      #   value_template: >-
      #     {{ states.binary_sensor | selectattr('state', 'eq', 'on') | selectattr('attributes.device_class', 'eq', 'window') | list | count }}
      # motion_count:
      #   entity_id: sensor.time
      #   value_template: >-
      #     {{ states.binary_sensor | selectattr('state', 'eq', 'on') | selectattr('attributes.device_class', 'eq', 'motion') | list | count }}

      gdrive_last_backup:
        friendly_name: GBackup time
        icon_template: mdi:clock
        value_template: "{{(as_timestamp(state_attr('sensor.snapshot_backup','last_snapshot')) )|timestamp_custom('%H:%M %d.%m.%Y ')}}"
        
      gdrive_backup_state:
        friendly_name: GBackup status
        icon_template: mdi:backup-restore
        value_template: "{{states('sensor.snapshot_backup')|capitalize|replace('_',' ')}}"
        
      git_stars:
        friendly_name: GitHub Stars
        value_template: "{{state_attr('sensor.myconfig','stargazers')|int}}"
        icon_template: mdi:star

      home_status:
        friendly_name: Home Occupation
        #device_class: presence
        value_template: >
          {% if states('binary_sensor.family_home') == "on" %}
          Occupied
          {% else %}
          Empty
          {% endif %}
        icon_template: >
          {% if states('binary_sensor.family_home') == "on" %}
          mdi:home-account
          {% else %}
          mdi:home-outline
          {% endif %}
        
# ############################################################################
# Last motion sensors
# ############################################################################
      last_motion:
        friendly_name: 'Last Motion'
        value_template: >
          {%- set sensors = expand('group.motioninternal') %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.name }}
            {% endif %}
          {% endfor %}
      last_motion_time:
        friendly_name: 'Last Motion Time'
        value_template: '{{ as_timestamp(states.group.motioninternal.last_changed) | timestamp_custom("%a %d %b %H:%M") }}'

      security_devices_last_triggered:
        friendly_name: 'Last Triggered SecurityDevices'
        value_template: >
          {%- set sensors = expand('group.securitydevices') %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.name }}
            {% endif %}
          {% endfor %}
      security_devices_last_triggered_time:
        friendly_name: 'Last Triggered SecurityDevices Time'
        value_template: '{{ as_timestamp(states.group.securitydevices.last_changed) | timestamp_custom("%a %d %b %H:%M") }}'

      door_last_change:
        friendly_name: 'Last change door sensor'
        value_template: >
          {%- set sensors = expand('group.doors') %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.name }}
            {% endif %}
          {% endfor %}
      door_last_change_time:
        friendly_name: 'Last change door sensor time'
        value_template: '{{ (now()-states.sensor.door_last_change.last_changed) | timestamp_custom("%H:%M:%S") }}'

      window_last_change:
        friendly_name: 'Last change window sensor'
        value_template: >
          {%- set sensors = expand('group.windows') %}
          {% for sensor in sensors %}
            {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
              {{ sensor.name }}
            {% endif %}
          {% endfor %}
      window_last_change_time:
        friendly_name: 'Last change window sensor time'
        value_template: '{{ (now()-states.sensor.window_last_change.last_changed) | timestamp_custom("%H:%M:%S") }}'

      # stove:
      #   value_template: "{{ state_attr('switch.0x00158d000249b25b_switch','power')|float }}"
      #   unit_of_measurement: 'W'
        
      # kettle:
      #   value_template: "{{ states('switch.0x158d00028c9875_power')|float }}"
      #   unit_of_measurement: 'W'
        
      # mw: 
      #   value_template: "{{ states('sensor.0x158d00028a54e4_power')|float }}"
      #   unit_of_measurement: 'W'

      people_home:
        friendly_name: Persons At Home
        value_template: "{{ expand('group.persons') | map(attribute='state') | select('eq','home')| list | length }}"
        unit_of_measurement: 'ea'
        icon_template: mdi:account-group

# ############################################################################
# Time\date sensor
# ############################################################################
  - platform: time_date
    display_options:
      - 'time'
      - 'date'
      - 'date_time'
      - 'date_time_iso'
      - 'time_date'
      - 'time_utc'
      - 'beat'
      
  - platform: template
    sensors:
      current_year:
        value_template: "{{states('sensor.date').split('-')[0]}}"
      current_month:
        value_template: "{{states('sensor.date').split('-')[1]}}"
      current_day:
        value_template: "{{states('sensor.date').split('-')[2]}}"
      current_hour:
        value_template: "{{states('sensor.time').split(':')[0]}}"
      current_minute:
        value_template: "{{states('sensor.time').split(':')[1]}}"